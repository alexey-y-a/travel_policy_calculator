approve-and-merge:
  needs: [create-pr, build]
  runs-on: ubuntu-latest
  steps:
    - uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.BOT_TOKEN }}
        script: |
          const prNumber = ${{ needs.create-pr.outputs.pr_number }};
          console.log('Processing PR:', prNumber);

          // 1. Проверяем, есть ли уже одобрения
          const reviews = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber
          });

          const hasApproval = reviews.data.some(review => review.state === 'APPROVED');

          if (!hasApproval) {
            // 2. Одобряем PR от имени alexey-a-y
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              event: 'APPROVE'
            });
            console.log('PR approved by alexey-a-y');
          } else {
            console.log('PR already approved, skipping approval');
          }

          // 3. Временно отключаем защиту ветки main
          await github.rest.repos.updateBranchProtection({
            owner: context.repo.owner,
            repo: context.repo.repo,
            branch: 'main',
            required_status_checks: null,
            enforce_admins: null,
            restrictions: null,
            required_pull_request_reviews: null // Добавляем параметр
          });

          // 4. Мержим PR
          await github.rest.pulls.merge({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber,
            merge_method: 'squash'
          });

          // 5. Восстанавливаем защиту ветки main
          await github.rest.repos.updateBranchProtection({
            owner: context.repo.owner,
            repo: context.repo.repo,
            branch: 'main',
            required_status_checks: {
              strict: true,
              contexts: ['build']
            },
            enforce_admins: true,
            restrictions: null,
            required_pull_request_reviews: {
              dismiss_stale_reviews: false,
              require_code_owner_reviews: false,
              required_approving_review_count: 1 // Указываем минимальное количество одобрений
            } // Восстанавливаем настройки PR
          });

          // 6. Удаляем ветку
          const branchName = context.ref.replace('refs/heads/', '');
          await github.rest.git.deleteRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'heads/' + branchName
          });