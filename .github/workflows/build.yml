name: Auto PR & Merge

on:
  push:
    branches-ignore: [main]

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write
  actions: write

jobs:
  create-pr:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create-pr.outputs.pr_number }}
    steps:
      - uses: actions/github-script@v6
        id: create-pr
        with:
          script: |
            const branchName = context.ref.replace('refs/heads/', '');
            
            // Проверяем, существует ли уже PR для этой ветки
            const prList = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branchName}`,
              state: 'open'
            });

            let prNumber;

            if (prList.data.length > 0) {
              // Если PR уже существует, используем его номер
              prNumber = prList.data[0].number;
              console.log(`Found existing PR: #${prNumber}`);
            } else {
              // Если PR не существует, создаем новый
              const response = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Auto-PR: ${branchName}`,
                head: branchName,
                base: 'main',
                body: 'Автоматически созданный PR'
              });
              prNumber = response.data.number;
              console.log(`Created new PR: #${prNumber}`);
            }

            // Устанавливаем номер PR в output
            core.setOutput('pr_number', prNumber);

  build:
    needs: create-pr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'
      - run: chmod +x ./gradlew
      - run: ./gradlew build

  approve-and-merge:
    needs: [create-pr, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            const prNumber = ${{ needs.create-pr.outputs.pr_number }};
            console.log('Processing PR:', prNumber);

            // 1. Одобряем PR
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              event: 'APPROVE'
            });

            // 2. Временно отключаем защиту ветки main
            await github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main',
              required_status_checks: null,
              enforce_admins: null,
              restrictions: null
            });

            // 3. Мержим PR
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'squash'
            });

            // 4. Восстанавливаем защиту ветки main
            await github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main',
              required_status_checks: {
                strict: true,
                contexts: ['build']
              },
              enforce_admins: true,
              restrictions: null
            });

            // 5. Удаляем ветку
            const branchName = context.ref.replace('refs/heads/', '');
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/' + branchName
            });