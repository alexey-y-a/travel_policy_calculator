name: Auto PR & Merge

on:
  push:
    branches-ignore:
      - main

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write
  actions: write

jobs:
  create-pr:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create-pr.outputs.pr_number }}
    steps:
      - uses: actions/github-script@v6
        id: create-pr
        with:
          script: |
            const branchName = context.ref.replace('refs/heads/', '');
            
            // Проверяем существующие PR для ветки
            const prList = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branchName}`,
              state: 'open'
            });

            let prNumber;

            if (prList.data.length > 0) {
              prNumber = prList.data[0].number;
              console.log(`Найден существующий PR: #${prNumber}`);
            } else {
              // Создаем новый PR
              const response = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Auto-PR: ${branchName}`,
                head: branchName,
                base: 'main',
                body: 'Автоматически созданный PR'
              });
              prNumber = response.data.number;
              console.log(`Создан новый PR: #${prNumber}`);
            }

            core.setOutput('pr_number', prNumber);

  build:
    needs: create-pr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Установка JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'
      - run: chmod +x ./gradlew
      - run: ./gradlew build
        name: Запуск сборки

  approve-and-merge:
    needs: [create-pr, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const prNumber = ${{ needs.create-pr.outputs.pr_number }};
            console.log('Обрабатываем PR:', prNumber);

            // 1. Проверяем существующие одобрения
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const hasApproval = reviews.data.some(review => review.state === 'APPROVED');

            if (!hasApproval) {
              // 2. Одобряем PR
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: 'Автоматическое одобрение'
              });
              console.log('PR одобрен автоматически');
            }

            // 3. Получаем текущие правила защиты ветки
            let protection;
            try {
              protection = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'main'
              });
            } catch (error) {
              console.log('Не удалось получить правила защиты ветки:', error.message);
            }

            // 4. Мержим PR
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash'
              });
              console.log('PR успешно вмержен');
            } catch (error) {
              console.error('Ошибка при мерже:', error.message);
              core.setFailed('Не удалось выполнить мерж PR');
            }

            // 5. Удаляем ветку
            try {
              const branchName = context.ref.replace('refs/heads/', '');
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/' + branchName
              });
              console.log('Ветка успешно удалена');
            } catch (error) {
              console.error('Ошибка при удалении ветки:', error.message);
            }